pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-cred'
        KUBECONFIG= '/var/lib/jenkins/.kube/config'

    }

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "Maven"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Code download') {
            steps {
                // Get some code from a GitHub repository
                git branch: 'main', url: 'https://github.com/Parthrajv/mvc_1.git'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build the Docker image using Dockerfile
                sh "docker build -t parthrajv/sample_app:$BUILD_NUMBER ."
            }
        }

        stage('User Approval') {
            steps {
                script {
                    // Pauses the pipeline and asks for user input before proceeding
                    def userInput = input(id: 'PushConfirmation', message: 'Do you want to push the Docker image to Docker Hub?', ok: 'Yes', parameters: [])
                    echo "User approved the push: ${userInput}"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "$DOCKER_CREDENTIALS_ID", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS'
                    }
                    echo 'Pushing Docker image to Docker Hub...'
                    sh "docker push parthrajv/sample_app:$BUILD_NUMBER"
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo 'Deploying application to Kubernetes...'
                    
                    // Run kubectl commands
                    sh '''
                        kubectl get nodes
                        cd K8s
                    '''
                }
            }
        }
    }
}
